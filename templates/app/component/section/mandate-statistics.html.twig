{% import 'macros.html.twig' as macros %}

{% set maxCount = 0 %}
{% for promise in promise_statistics %}
    {% set maxCount = max(maxCount, promise.count) %}
{% endfor %}

{% set statistics_color = 'primary' %}

<div class="mandate-statistics bg-white pb-5">
    {% include 'app/component/after-header-space.html.twig' %}
    <div class="container">
        <div class="row">
            <div class="col">
                <h2 class="text-center mb-5">{{ mandate.institutionTitle.title.name }}</h2>
            </div>
        </div>
        <div class="row">
            <div class="col-auto pr-0 d-none d-sm-block">
                <img src="{{ macros.politician_photo_url(mandate.politician) }}"
                     alt="Politician"
                     class="rounded-circle img-fluid mr-2"
                     style="max-width: 5rem;"
                >
            </div>
            <div class="col">
                <h3>{{ mandate.politician.firstName }} {{ mandate.politician.lastName }}</h3>

                <div class="progress mt-3 bg-light h-auto">
                    <div class="progress-bar bg-{{ statistics_color }} text-right px-2 py-1"
                         style="width: {{ mandate.votesPercent }}%;"
                    >
                        <div class="row">
                            <div class="col text-left">
                                <span class="fa fa-male mr-1"></span>
                                <samp>
                                    {{ mandate.votesCount|number_format }}
                                    <span class="d-none d-sm-inline">{{ 'text.votes'|trans }}</span>
                                </samp>
                            </div>
                            <div class="col text-right">
                                <samp>{{ mandate.votesPercent }}%</samp>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <div class="row">
                    <div class="col">
                        <samp class="text-{{ statistics_color }}">{{ mandate.beginDate|date('d.m.Y') }}</samp>
                    </div>
                    <div class="col text-right">
                        <samp class="text-{{ statistics_color }}">{{ mandate.endDate|date('d.m.Y') }}</samp>
                    </div>
                </div>
                <div class="progress thin bg-light mandate-period">
                    <div class="progress-bar bg-{{ statistics_color }}"
                         style="width: {{ '' ~ macros.get_date_interval_progress(mandate.beginDate, mandate.endDate) }}%;"
                    >
                        <span class="fas fa-clock text-primary bg-white rounded-circle"></span>
                    </div>
                </div>
            </div>
        </div>
        {% if maxCount %}
            <div class="row mt-5">
                <div class="col">
                    <h3 class="mb-3">{{ 'title.promises'|trans }}</h3>
                    {% for promise in promise_statistics %}
                        <div class="{% if not loop.last %}mb-3{% endif %}">
                            <div>
                                {% if promise.status is defined %}
                                    {% set statusName = promise.count == 1
                                        ? promise.status.name
                                        : promise.status.namePlural %}
                                    {% set bgColorClass = "status-bg-" ~ promise.status.color ~ "-dark" %}
                                    {% set colorClass = "status-color-" ~ promise.status.color %}
                                {% else %}
                                    {% set statusName = promise.count == 1
                                        ? 'placeholder.inactive_singular'|trans
                                        : 'placeholder.inactive_plural'|trans %}
                                    {% set bgColorClass = "bg-secondary" %}
                                    {% set colorClass = "text-secondary" %}
                                {% endif %}
                                {% set spacingClasses = "py-1 px-2" %}
                                {% set badgeClasses = "badge bg-white align-text-top mr-1" %}

                                <a
                                    href="{{ path('status', {'slug': promise.status is defined ? promise.status.slug : '~'}) }}"
                                    class="status-statistics bg-light {{ spacingClasses }}"
                                >
                                    <div class="{{ bgColorClass }} {{ spacingClasses }}" style="width: {{ promise.count * 100 / maxCount }}%;">
                                        <span class="{{ colorClass }} {{ badgeClasses }}"><samp>{{ promise.count }}</samp></span>
                                        {{ statusName }}
                                    </div>
                                    <span class="{{ colorClass }}">
                                        <span class="{{ colorClass }} {{ badgeClasses }}"><samp>{{ promise.count }}</samp></span>
                                        {{ statusName }}
                                    </span>
                                </a>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        {% endif %}
    </div>
</div>

{#<div>
    <div>
        {{ 'title.used_powers'|trans }}
        <span class="text-muted">
                                <samp class="text-{{ statistics_color }}">{{ power_statistics.count_used }}</samp>
                                din
                                <samp class="text-{{ statistics_color }}">{{ power_statistics.count_all }}</samp>
                            </span>
    </div>
    <div class="progress mt-1 bg-light">
        <div class="progress-bar bg-{{ statistics_color }}"
             style="width: {{ power_statistics.count_used / power_statistics.count_all * 100 }}%;"
        ></div>
    </div>
</div>#}
